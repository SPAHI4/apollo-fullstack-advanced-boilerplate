scalar DateTime
scalar Date

type User {
	id: ID!
	username: String
	email: String
	firstName: String
	lastName: String
	posts: [Post]
	avatar: String
}

input UserInput {
	username: String!
	email: String!
	password: String!
	firstName: String
	lastName: String
	avatar: File
}

type Post {
	id: ID!
	title: String!
	content: String
	createdAt: DateTime
	updatedAt: DateTime
	author: User
}

input PostInput {
	title: String
	content: String
}

input File {
	name: String!
	type: String!
	size: Int!
	path: String!
}

type UserWithToken {
	token: String!
	currentUser: User!
}

#simple offset-based pagination
interface Page {
	totalCount: Int
}

type UserPage implements Page {
	nodes: [User]
	totalCount: Int!
}

type PostPage implements Page {
	nodes: [Post!]
	totalCount: Int!
}

type Query {
	currentUser: User,
	users(skip: Int, take: Int): UserPage,
	posts(skip: Int, take: Int): PostPage
}

type Mutation {
	getToken(username: String, email: String, password: String!): UserWithToken
	createUser(user: UserInput!): UserWithToken
	updateUser(user: UserInput!): User
	createPost(post: PostInput!): Post
	updatePost(id: Int!, post: PostInput!): Post
	deletePost(id: Int!): Post
}

type Subscription {
	createdPost: Post
	updatedPost: Post
	deletedPost: Post
}

schema {
	query: Query
	mutation: Mutation
	subscription: Subscription
}
