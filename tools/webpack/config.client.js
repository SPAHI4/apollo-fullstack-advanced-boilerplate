import path from 'path';
import fs from 'fs';
import webpack from 'webpack';
import merge from 'webpack-merge';
import HtmlWebpackPlugin from 'html-webpack-plugin';
import appRoot from 'app-root-path';
import cheerio from 'cheerio';

import config from '../../config';
import prodConfig from './config.client.prod';
import devConfig from './config.client.dev';

const IS_DEV = process.env.NODE_ENV !== 'production';

const baseConfig = {
	target: 'web',
	context: appRoot.toString(),
	entry: {
		app: [
			'react-hot-loader/patch',
			'webpack-dev-server/client',
			'webpack/hot/only-dev-server',
			'regenerator-runtime/runtime',
			'./client/index.js',
		],
	},
	output: {
		path: config.path.frontend,
		publicPath: config.publicPath,
		// filename: "[chunkhash].js",
		chunkFilename: '[chunkhash].js',
		// devtoolModuleFilenameTemplate: 'webpack:///[absolute-resource-path]',
	},
	devtool: 'source-map',
	module: {
		loaders: [
			{
				test: /\.js$/,
				loader: 'babel-loader',
				exclude: /node_modules/,
				query: {
					babelrc: false,
					presets: [
						'react',
						'stage-3',
						['latest', { es2015: { modules: false } }],
					],
					plugins: [
						['import', { libraryName: 'antd', style: true }],
						'react-hot-loader/babel',
						'transform-react-jsx-self',
						'transform-react-jsx-source',
						'transform-decorators',
						'transform-class-properties',
						[
							'react-css-modules',
							{
								webpackHotModuleReloading: true,
								exclude: 'node_modules',
								generateScopedName: '[path]___[name]__[local]___[hash:base64:5]',
							},
						],
					],
				},
			},
			{
				test: /\.css$/,
				use: [
					{ loader: 'style-loader' },
					{
						loader: 'css-loader',
						options: {
							modules: true,
							importLoaders: 1,
							localIdentName: '[path]___[name]__[local]___[hash:base64:5]',
						},
					},
					{
						loader: 'postcss-loader',
						options: {
							sourceMap: 'inline',
							plugins: [
								require('postcss-import')(),
								require('postcss-cssnext')({
									features: {
										customProperties: {
											variables: {
												'primary-color': config.primaryColor,
											},
										},
									},
								}),
								// require('postcss-csso'),
								require('postcss-reporter')(),
							],
						},
					},
				],
			},
			{
				test: /\.less$/,
				use: [{
					loader: 'style-loader',
				}, {
					loader: 'css-loader',
				}, {
					loader: 'less-loader',
					options: {
						modifyVars: {
							'primary-color': config.primaryColor,
						},
					},
				}],
			},
			{
				test: /\.(graphql|gql)$/,
				exclude: /node_modules/,
				loader: 'graphql-tag/loader',
			},
		],
	},
	plugins: [
		new webpack.NamedModulesPlugin(),
		new HtmlWebpackPlugin({
			inject: true, // Inject all files that are generated by webpack, e.g. bundle.js
			templateContent: getHtmlTemplate(), // eslint-disable-line no-use-before-define
		}),
		new webpack.DefinePlugin({
			'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV),
			'process.env.IS_DEV': JSON.stringify(IS_DEV),
			'process.env.IS_PROD': JSON.stringify(!IS_DEV),
			'process.env.IS_CLIENT': JSON.stringify(true),
		}),
	],
	// recordsOutputPath: config.path.frontend,
};

function getHtmlTemplate() {
	const html = fs.readFileSync(
		appRoot.resolve('client/index.html'),
	).toString();

	return html;
}

const currentConfig = IS_DEV ? devConfig : prodConfig;
export default merge(baseConfig, currentConfig);
